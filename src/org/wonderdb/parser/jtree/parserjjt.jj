/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parserjjt.jj */
/*@egen*/PARSER_BEGIN(UQLParser)
package org.wonderdb.parser.jtree;

import java.io.StringReader;
import java.io.Reader;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.ByteArrayInputStream;

public class UQLParser/*@bgen(jjtree)*/implements UQLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTUQLParserState jjtree = new JJTUQLParserState();

/*@egen*/
/**  
  A String based constructor for ease of use.
  **/
    public UQLParser(String s) 
    {
        this((Reader)(new StringReader(s))); 
    }
       
    public static void main(String args[])
    {
        try
        {
              String query = args[0];
              InputStream is = new ByteArrayInputStream(args[0].getBytes());
              UQLParser t = new UQLParser(is);
              SimpleNode n = t.Start();
              n.dump(" ");
//              ExpressionNode en = SimpleNodeHelper.getInstance().shouldQueryRewriteStartNode(n);
//              SimpleNodeHelper.getInstance().flattenNode(en);
             //UQLParser parser = new UQLParser(query);
              //parser.parse();
              // System.out.println(parser.parse().toString());
        }
        catch(Exception e)
        {
              e.printStackTrace();
        }
    }    
}

PARSER_END(UQLParser)


/** Skip these characters, they are considered "white space" **/
SKIP :                              
{
    " "
    | "\t"
    | "\r"
    | "\n"

}

TOKEN [IGNORE_CASE]: /*RESERVED TOKENS FOR UQL */
{
      <INSERT: 	"insert">
   |  <SELECT:  "select">
   |  <DELETE:  "delete">
   |  <UPDATE:  "update">
   |  <WHERE:  	"where">
   |  <SET:  	"set">
   |  <INTO:  	"into">
   |  <VALUES:  "values">
   |  <AND:  	"and">
   |  <OR:  	"or">
   |  <FROM:  	"from">
   |  <INT: 	"int">
   |  <LONG: 	"long">
   |  <DOUBLE: 	"double">
   |  <FLOAT: 	"float">
   |  <STR: 	"string">
   |  <CREATE: "create">
   |  <INDEX: 	"index">
   |  <UNIQUE: 	"unique">
   |  <ON: 	"on">
   |  <TABLE: 	"table">
   |  <SHOW: 	"show">
   |  <SCHEMA: 	"schema">
   |  <LIKE:	"like">
   |  <STORAGE:	"storage">
   |  <IS_DEFAULT:	"is_default">
   |  <YES:	"yes">
   |  <NO:	"no">
   |  <ALTER:	"alter">
   |  <ADD:	"add">
   |  <NULL:	"null">
   |  <SHARD:	"shard">
   |  <REPLICASET:	"replicaset">
   |  <TO:	"to">
   |  <UNION:	"union">
   |  <STORAGES:	"storages">
   |  <LOGGING:	"logging">
   |  <ENABLED:	"enabled">
   |  <DISABLED:	"disabled">
   |  <EXPLAIN:	"explain">
   |  <PLAN:	"plan">
   |  <SHUTDOWN:	"shutdown">
   |  <DEFAULT_STORAGE:	"default storage">
   |  <UNION_ALL:	"union all">
}

TOKEN: /*RESERVED TOKENS FOR UQL */
{
      <COMMA: 	",">
   |  <LPAREN: 	"(">
   |  <RPAREN: 	")">
   |  <EQUALS: 	"=">
   |  <NOTEQUAL: "<>">
   |  <GE: 	">=">
   |  <LE: 	"<=">
   |  <GT: 	">">
   |  <LT: 	"<">
   |  <PLUS: 	"+">
   |  <MINUS: 	"-">
   |  <DIV: 	"/">
   |  <MUL: 	"*">
   |  <Q:	"?">
}

TOKEN: 
{
	<QUOTED_STRING: "\"" (~["\""])? "\"" >
|	<SINGLE_QUOTED_STRING: "'" (~["'"])* "'" >
|	<NUMBER : (["0"-"9"])+ >
|	<STRING : (["A"-"Z", "a"-"z"])(["A"-"Z", "a"-"z", "0"-"9"])*>
}

void number() : {/*@bgen(jjtree) number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) number */
        try {
/*@egen*/
	[minus()] decimal() ["." precision()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void decimal() : {/*@bgen(jjtree) decimal */
  SimpleNode jjtn000 = new SimpleNode(JJTDECIMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) decimal */
        try {
/*@egen*/
	<NUMBER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void precision() : {/*@bgen(jjtree) precision */
  SimpleNode jjtn000 = new SimpleNode(JJTPRECISION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) precision */
        try {
/*@egen*/
	<NUMBER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void columnAndAlias() : {/*@bgen(jjtree) columnAndAlias */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLUMNANDALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) columnAndAlias */
        try {
/*@egen*/
	( <STRING> | <MUL> ) ["." ( <STRING> | <MUL> )]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void literal()       : {}
{
	multiplicativeExpression()
}

void literalList() : {/*@bgen(jjtree) literalList */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERALLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) literalList */
        try {
/*@egen*/
	literal() ( <COMMA> literal() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void insertColumnList() : {/*@bgen(jjtree) insertColumnList */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERTCOLUMNLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) insertColumnList */
        try {
/*@egen*/
	columnAndAlias() ( <COMMA> columnAndAlias() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void selectColumnList() : {/*@bgen(jjtree) selectColumnList */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTCOLUMNLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) selectColumnList */
        try {
/*@egen*/
	columnAndAlias() ( <COMMA> columnAndAlias() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void tableDef() : {/*@bgen(jjtree) tableDef */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) tableDef */
        try {
/*@egen*/
	<STRING> [ <STRING> ]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void tableDefList()       : {}
{
	tableDef() ( <COMMA> tableDef() )*
}

void updateColumn() : {/*@bgen(jjtree) updateColumn */
  SimpleNode jjtn000 = new SimpleNode(JJTUPDATECOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) updateColumn */
        try {
/*@egen*/
	columnAndAlias() <EQUALS> literal()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void updateColumnList()       : {}
{
	updateColumn() ( <COMMA> updateColumn() )*
}

/** Root production. */
Object parse() :
{/*@bgen(jjtree) parse */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Object o;
}
{/*@bgen(jjtree) parse */
  try {
/*@egen*/
  ( ( 	selectStmt() |
  	insertStmt() |
  	updateStmt() |
  	deleteStmt()
  ) 
  ";" )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/

  { return null; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/ 
}

SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
 try {
/*@egen*/
 ( (	selectUnionStmt() |
  	insertStmt() |
  	updateStmt() |
  	deleteStmt() |
  	LOOKAHEAD(2) createTable() |
  	LOOKAHEAD(2) createIndex() |
  	alterTable() |
  	LOOKAHEAD(2) createStorage() |
  	LOOKAHEAD(2) showStorages() |
  	LOOKAHEAD(2) showSchema() |
  	LOOKAHEAD(2) showTable() |
  	explainPlan() |
  	shutdown()
  ) ";")/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void filterExpression() : {/*@bgen(jjtree) filterExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTFILTEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) filterExpression */
        try {
/*@egen*/
	compareEquation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void compareEquation()  : {/*@bgen(jjtree) compareEquation */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPAREEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) compareEquation */
        try {
/*@egen*/
	equalityEquation() ( LOOKAHEAD(2) ( and() | or() ) equalityEquation() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void equalityEquation() : {/*@bgen(jjtree) equalityEquation */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALITYEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} // void here!
{/*@bgen(jjtree) equalityEquation */
        try {
/*@egen*/
	multiplicativeExpression() [ LOOKAHEAD(2) ( gt() | lt() | ge() | le() | eq() | ne() ) multiplicativeExpression()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/** A Multiplicative Expression. */
void multiplicativeExpression()  : {/*@bgen(jjtree) multiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} // void here !
{/*@bgen(jjtree) multiplicativeExpression */
  try {
/*@egen*/
  unaryExpression() ( LOOKAHEAD(2) ( plus() | minus() | mul() | div() ) unaryExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

/** A Unary Expression. */
void unaryExpression() /* #void */ : {/*@bgen(jjtree) unaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) unaryExpression */
  try {
/*@egen*/
  ( LOOKAHEAD(2) fn() | groupedCompareEquation() | str() | columnAndAlias() | number() | q())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void groupedCompareEquation() : {/*@bgen(jjtree) groupedCompareEquation */
  SimpleNode jjtn000 = new SimpleNode(JJTGROUPEDCOMPAREEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} // void here!
{/*@bgen(jjtree) groupedCompareEquation */
        try {
/*@egen*/
	"(" compareEquation() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void plus() : {/*@bgen(jjtree) plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) plus */
        try {
/*@egen*/
	<PLUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void q() : {/*@bgen(jjtree) q */
  SimpleNode jjtn000 = new SimpleNode(JJTQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) q */
        try {
/*@egen*/
	<Q>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void str() : {/*@bgen(jjtree) str */
  SimpleNode jjtn000 = new SimpleNode(JJTSTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) str */
        try {
/*@egen*/
	<QUOTED_STRING> | <SINGLE_QUOTED_STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void gt() : {/*@bgen(jjtree) gt */
  SimpleNode jjtn000 = new SimpleNode(JJTGT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) gt */
        try {
/*@egen*/
	<GT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void lt() : {/*@bgen(jjtree) lt */
  SimpleNode jjtn000 = new SimpleNode(JJTLT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) lt */
        try {
/*@egen*/
	<LT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ge() : {/*@bgen(jjtree) ge */
  SimpleNode jjtn000 = new SimpleNode(JJTGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ge */
        try {
/*@egen*/
	<GE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void le() : {/*@bgen(jjtree) le */
  SimpleNode jjtn000 = new SimpleNode(JJTLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) le */
        try {
/*@egen*/
	<LE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void eq() : {/*@bgen(jjtree) eq */
  SimpleNode jjtn000 = new SimpleNode(JJTEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) eq */
        try {
/*@egen*/
	<EQUALS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ne() : {/*@bgen(jjtree) ne */
  SimpleNode jjtn000 = new SimpleNode(JJTNE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ne */
        try {
/*@egen*/
	<NOTEQUAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void minus() : {/*@bgen(jjtree) minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) minus */
        try {
/*@egen*/
	<MINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void mul() : {/*@bgen(jjtree) mul */
  SimpleNode jjtn000 = new SimpleNode(JJTMUL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) mul */
        try {
/*@egen*/
	<MUL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void div() : {/*@bgen(jjtree) div */
  SimpleNode jjtn000 = new SimpleNode(JJTDIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) div */
        try {
/*@egen*/
	<DIV>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void and() : {/*@bgen(jjtree) and */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) and */
        try {
/*@egen*/
	<AND>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void or() : {/*@bgen(jjtree) or */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) or */
        try {
/*@egen*/
	<OR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void selectUnionStmt()       : 
{
}
{
	selectStmt() (( union() | unionAll() ) selectStmt())*
}

void union() : {/*@bgen(jjtree) union */
  SimpleNode jjtn000 = new SimpleNode(JJTUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) union */
        try {
/*@egen*/
	<UNION>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void unionAll() : {/*@bgen(jjtree) unionAll */
  SimpleNode jjtn000 = new SimpleNode(JJTUNIONALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) unionAll */
        try {
/*@egen*/
	<UNION_ALL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void selectStmt() :
{/*@bgen(jjtree) selectStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) selectStmt */
        try {
/*@egen*/
	<SELECT>
	literalList()
	<FROM>
	tableDefList()
	[ <WHERE> filterExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void insertStmt() :
{/*@bgen(jjtree) insertStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) insertStmt */
        try {
/*@egen*/
	<INSERT> <INTO> tableName()
	( <LPAREN> insertColumnList() <RPAREN> 
		( <VALUES> <LPAREN> literalList() <RPAREN> |
		  selectStmt() ) |
	  selectStmt() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void updateStmt() :
{/*@bgen(jjtree) updateStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTUPDATESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) updateStmt */
        try {
/*@egen*/
	<UPDATE> tableDef()
	<SET> updateColumnList()
	[ <WHERE> filterExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void deleteStmt() :
{/*@bgen(jjtree) deleteStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDELETESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) deleteStmt */
        try {
/*@egen*/
	<DELETE> tableDef()
	[ <WHERE> filterExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/** An Identifier. */
void identifier() : {/*@bgen(jjtree) identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) identifier */
  try {
/*@egen*/
  <STRING>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

/** An Integer. */
void integer()       : {}
{
  number()
}

void fn() : {/*@bgen(jjtree) fn */
  SimpleNode jjtn000 = new SimpleNode(JJTFN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) fn */
        try {
/*@egen*/
	identifier() "(" [ multiplicativeExpression() ] ( <COMMA> multiplicativeExpression() )* ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void createTable() : {/*@bgen(jjtree) createTable */
  SimpleNode jjtn000 = new SimpleNode(JJTCREATETABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) createTable */
        try {
/*@egen*/
	<CREATE> <TABLE> tableName() <LPAREN> createTableColumnDef() ( <COMMA> createTableColumnDef() )* <RPAREN>
	[ <STORAGE> storageName() ]
	[ <LOGGING> ( <ENABLED> | <DISABLED> ) ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void tableName() : {/*@bgen(jjtree) tableName */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) tableName */
        try {
/*@egen*/
	<STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void indexName() : {/*@bgen(jjtree) indexName */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEXNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) indexName */
        try {
/*@egen*/
	<STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void tableColumnName() : {/*@bgen(jjtree) tableColumnName */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLECOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) tableColumnName */
        try {
/*@egen*/
	<STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}	

void tableColumnType() : {/*@bgen(jjtree) tableColumnType */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLECOLUMNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) tableColumnType */
        try {
/*@egen*/
	<INT> | <LONG> | <DOUBLE> | <FLOAT> | <STR> | <STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}	

void createTableColumnDef() : {/*@bgen(jjtree) createTableColumnDef */
  SimpleNode jjtn000 = new SimpleNode(JJTCREATETABLECOLUMNDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) createTableColumnDef */
        try {
/*@egen*/
	tableColumnName() tableColumnType()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void createStorage() : {/*@bgen(jjtree) createStorage */
  SimpleNode jjtn000 = new SimpleNode(JJTCREATESTORAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) createStorage */
        try {
/*@egen*/
	<CREATE> [ defaultStorage() ] <STORAGE> storageName() [ storageSize() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void storageName() : {/*@bgen(jjtree) storageName */
  SimpleNode jjtn000 = new SimpleNode(JJTSTORAGENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) storageName */
        try {
/*@egen*/
	<SINGLE_QUOTED_STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void storageSize() : {/*@bgen(jjtree) storageSize */
  SimpleNode jjtn000 = new SimpleNode(JJTSTORAGESIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) storageSize */
        try {
/*@egen*/
	<NUMBER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void defaultStorage() : {/*@bgen(jjtree) defaultStorage */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFAULTSTORAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) defaultStorage */
        try {
/*@egen*/
	<DEFAULT_STORAGE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void createIndex() : {/*@bgen(jjtree) createIndex */
  SimpleNode jjtn000 = new SimpleNode(JJTCREATEINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) createIndex */
        try {
/*@egen*/
	<CREATE> [ unique() ] <INDEX> indexName() <ON> tableName() <LPAREN>
		indexColumn() ( <COMMA> indexColumn() )* <RPAREN>
		[ <STORAGE> storageName() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void indexColumn() : {/*@bgen(jjtree) indexColumn */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEXCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) indexColumn */
        try {
/*@egen*/
	LOOKAHEAD(2) identifier() | fnDef()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//void fnDef() : {}
//{
//	fnName() <LPAREN> [ ( identifier() | number() ) ( LOOKAHEAD(2) <COMMA> ( identifier() | number() ) )* ]
//}

void fnDef() : {/*@bgen(jjtree) fnDef */
  SimpleNode jjtn000 = new SimpleNode(JJTFNDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) fnDef */
        try {
/*@egen*/
	fnName() <LPAREN> [ indexColumn() ( LOOKAHEAD(2) <COMMA> indexColumn() )* ] <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void fnName() : {/*@bgen(jjtree) fnName */
  SimpleNode jjtn000 = new SimpleNode(JJTFNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) fnName */
        try {
/*@egen*/
	<STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void unique() : {/*@bgen(jjtree) unique */
  SimpleNode jjtn000 = new SimpleNode(JJTUNIQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) unique */
        try {
/*@egen*/
	<UNIQUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void alterTable() : {/*@bgen(jjtree) alterTable */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) alterTable */
        try {
/*@egen*/
	<ALTER> <TABLE> tableName() <ADD>
	<LPAREN> createTableColumnDef() ( <COMMA> createTableColumnDef() )* <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void showStorages() : {/*@bgen(jjtree) showStorages */
  SimpleNode jjtn000 = new SimpleNode(JJTSHOWSTORAGES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) showStorages */
        try {
/*@egen*/
	<SHOW> <STORAGES>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void showSchema() : {/*@bgen(jjtree) showSchema */
  SimpleNode jjtn000 = new SimpleNode(JJTSHOWSCHEMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) showSchema */
        try {
/*@egen*/
	<SHOW> <SCHEMA>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void explainPlan() : {/*@bgen(jjtree) explainPlan */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPLAINPLAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) explainPlan */
        try {
/*@egen*/
	<EXPLAIN> <PLAN> selectStmt()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void showTable() : {/*@bgen(jjtree) showTable */
  SimpleNode jjtn000 = new SimpleNode(JJTSHOWTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) showTable */
        try {
/*@egen*/
	<SHOW> <TABLE> tableName()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void shutdown() : {/*@bgen(jjtree) shutdown */
  SimpleNode jjtn000 = new SimpleNode(JJTSHUTDOWN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) shutdown */
        try {
/*@egen*/
	<SHUTDOWN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
