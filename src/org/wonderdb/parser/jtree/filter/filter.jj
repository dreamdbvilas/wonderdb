/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. filter.jj */
/*@egen*/PARSER_BEGIN(FilterParser)
package org.wonderdb.parser.jtree.filter;

import java.io.StringReader;
import java.io.Reader;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.ByteArrayInputStream;

public class FilterParser/*@bgen(jjtree)*/implements FilterParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTFilterParserState jjtree = new JJTFilterParserState();

/*@egen*/
/**  
  A String based constructor for ease of use.
  **/
    public FilterParser(String s) 
    {
        this((Reader)(new StringReader(s))); 
    }
       
    public static void main(String args[])
    {
        try
        {
              String query = args[0];
              InputStream is = new ByteArrayInputStream(args[0].getBytes());
              FilterParser t = new FilterParser(is);
              SimpleNode n = t.Start();
              n.dump(" ");
//              ExpressionNode en = SimpleNodeHelper.getInstance().shouldQueryRewriteStartNode(n);
//              SimpleNodeHelper.getInstance().flattenNode(en);
              //UQLParser parser = new UQLParser(query);
              //parser.parse();
              // System.out.println(parser.parse().toString());
        }
        catch(Exception e)
        {
              e.printStackTrace();
        }
    }    
}

PARSER_END(FilterParser)

/** Skip these characters, they are considered "white space" **/
SKIP :                              
{
    " "
    | "\t"
    | "\r"
    | "\n"

}

TOKEN [IGNORE_CASE]: /*RESERVED TOKENS FOR UQL */
{
      <INSERT: 	"insert">
   |  <SELECT:  "select">
   |  <DELETE:  "delete">
   |  <UPDATE:  "update">
   |  <WHERE:  	"where">
   |  <CREATE: "create">
   |  <INDEX: 	"index">
   |  <UNIQUE: 	"unique">
   |  <AND:	"and">
   |  <OR:	"or">
   |  <ON: 	"on">
   |  <TABLE: 	"table">
   |  <UNION:	"union">
   |  <UNION_ALL:	"union all">
}

TOKEN: /*RESERVED TOKENS FOR UQL */
{
      <COMMA: 	",">
   |  <LPAREN: 	"(">
   |  <RPAREN: 	")">
}

TOKEN: 
{
//	<QUOTED_STRING: "\"" (~["\""])?"\"" >
//|	<SINGLE_QUOTED_STRING: "'" (~["'"])* "'" >
//|	<NUMBER : (["0"-"9"])+ >
//	<STRING : (~[ "(", ")"])+>
<STRING : (["A"-"Z", "a"-"z", "0"-"9", "+", "-", "/", ".", ",", "'", "\""])+>
}

/** Root production. */
Object parse() :
{/*@bgen(jjtree) parse */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Object o;
}
{/*@bgen(jjtree) parse */
  try {
/*@egen*/
  ( ( 	booleanSentence()
  ) 
  <EOF> )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/

  { return null; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/ 
}

SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
 try {
/*@egen*/
 ( (	booleanSentence()
  ) <EOF> )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void and() : {/*@bgen(jjtree) and */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) and */
        try {
/*@egen*/
	<AND>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void or() : {/*@bgen(jjtree) or */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) or */
        try {
/*@egen*/
	<OR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void function() : {/*@bgen(jjtree) function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) function */
        try {
/*@egen*/
	<STRING> "(" [<STRING>] ( "," <STRING>)*   ")"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void booleanSentence() : {/*@bgen(jjtree) booleanSentence */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANSENTENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) booleanSentence */
        try {
/*@egen*/
	sentence() ( ( and() | or() ) sentence())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void repeatString()      : {}
{
	<STRING> (<STRING>)*
}

void sentence() : {/*@bgen(jjtree) sentence */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) sentence */
         try {
/*@egen*/
	 LOOKAHEAD(4) repeatString() | nestedSentence() | LOOKAHEAD(4) function()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/
}

void nestedSentence() : {/*@bgen(jjtree) nestedSentence */
  SimpleNode jjtn000 = new SimpleNode(JJTNESTEDSENTENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) nestedSentence */
        try {
/*@egen*/
	"(" booleanSentence() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
