/* Generated By:JavaCC: Do not edit this line. UQLParser.java */
package org.wonderdb.parser;

import java.io.StringReader;
import java.io.Reader;
import java.util.List;
import java.util.ArrayList;

@SuppressWarnings("unused")
public class UQLParser implements UQLParserConstants {
/**  
  A String based constructor for ease of use.
  **/
    public UQLParser(String s)
    {
        this((Reader)(new StringReader(s)));
    }

    public static void main(String args[])
    {
        try
        {
              String query = args[0];
              UQLParser parser = new UQLParser(query);
              System.out.println(parser.parse().toString());
        }
        catch(Exception e)
        {
              e.printStackTrace();
        }
    }

    public static class Expression {
        public String leftOp;
        public String op;
        public String rightOp;
        public boolean likeOp = false;
        public String toString() { return "Left OP: " + leftOp + " op: " + op + " right op: " + rightOp + " like: " + likeOp; }
    }

    public static class Filter {
        public List<Expression> andList;
        public String toString() { return " And Filter: " + andList; }
    }

    public static class InsertStmt {
        public String table;
        public List<String> columns;
        public InsertColumns values;
        public String toString() { return "Table: "+ table + "\u005cn" + "Insert Columns: " + columns + "\u005cn" + "Values: " + values + "\u005cn"; }
    }

    public static class InsertColumns {
        public List<String> list=null;
        public SelectStmt stmt = null;
        public String toString() { String s = stmt != null ? " Select Stmt: " + stmt.toString() : ""; return "Insert Columns: " + list + s; }
    }

    public static class SelectStmt {
        public List<String> selectColList;
        public List<TableDef> tableDefList;
        public Filter filter;
        public String toString() { return "Select: " + selectColList + " \u005cn TableDef list: " + tableDefList + " \u005cn Filter: " + filter; }
    }

    public static class TableDef {
        public String table;
        public String alias;
        public String toString() { return "Table: " + table + " Alias: " + alias; }
    }

    public static class UpdateSetExpression {
        public String column;
        public String value;
        public String toString() { return " Column: " + column + " Value: " + value; }
    }

    public static class UpdateStmt {
        public String table;
        public List<UpdateSetExpression> updateSetExpList;
        public Filter filter;
        public String toString() { return "Table: " + table + "\u005cn Update Set: " + updateSetExpList + "\u005cn Filter: " + filter; }
    }

    public static class DeleteStmt {
        public String table;
        public Filter filter;
        public String toString() { return " Table Name: " + table + "\u005cn Filter: " + filter; }
    }

    public static class IndexCol {
        public String col;
        public String type;
        public String toString() { return " Column: " + col + " Type: " + type; }
    }

    public static class CreateIndexStmt {
        public String table;
        public boolean unique;
        public List<IndexCol> colList;
        public String idxName;
        public String storage;
        public String toString() { return "Index Name: " + idxName + " \u005cnTable: " + table + "\u005cn Unique: " + unique + "\u005cn Col List: " + colList + "\u005cn storage: " + storage; }
    }

    public static class CreateTableStmt {
        public String tableName;
        public List<IndexCol> colList;
        public String storage;
        public String toString() { return "Table Name: " + tableName + "\u005cn Col List: " + colList + "\u005cn storage: " + storage; }
    }

    public static class ShowTableStmt {
        public String tableName;
        public String toString() { return "Table Name: " + tableName + "\u005cn"; }
    }

    public static class ShowIndexStmt {
        public String indexName;
        public String toString() { return "Table Name: " + indexName + "\u005cn"; }
    }

    public static class ShowSchemaStmt {
    }

    public static class CreateStorageStmt {
        public String fileName;
        public String blockSize;
        public boolean isDefault = false;
        public String toString() { return "File Name: " + fileName + " Block Size: " + blockSize + " Is default: " + isDefault + "\u005cn"; }
    }

    public static class CreateShardStmt {
        public String collectionName;
        public String replicaSetName;
        public String indexName;
        public String toString() { return "Collection Name: " + collectionName + " Replicaset name: " + replicaSetName + " index Name: " + indexName + "\u005cn"; }
    }

    public static class CreateReplicaSetStmt {
        public String replicaSetName;
        public String toString() { return " Replicaset name: " + replicaSetName + "\u005cn"; }
    }

    public static class AddToReplicaSetStmt {
        public String replicaSetName;
        public String nodeId;
        public String toString() { return " Replicaset name: " + replicaSetName + " NodeId: " + nodeId + "\u005cn"; }
    }

  final public String number() throws ParseException {
        Token str;
    str = jj_consume_token(NUMBER);
             {if (true) return str.image;}
    throw new Error("Missing return statement in function");
  }

  final public String fileName() throws ParseException {
        Token t;
    t = jj_consume_token(SINGLE_QUOTED_STRING);
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

final public String quotedString() throws ParseException {
        Token t;
    t = jj_consume_token(QUOTED_STRING);
                              {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String lookaheadQuotedString() throws ParseException {
        String s = "";
        String s1 = "";
    s = quotedString();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(57);
      s1 = quotedString();
                                                           s = s + "\u005c"" + s1;
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String escapedQuotedString() throws ParseException {
        String s = "";
    s = lookaheadQuotedString();
                                      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String columnName() throws ParseException {
        Token s1 = null;
        Token s2 = null;
        String s="";
    s1 = jj_consume_token(STRING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
                                    s = ".*";
        break;
      case STRING:
        s2 = jj_consume_token(STRING);
                                                               s = "." + s2.image;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
                {if (true) return s1.image + s;}
    throw new Error("Missing return statement in function");
  }

  final public String queryOperator() throws ParseException {
        Token str;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      str = jj_consume_token(EQUALS);
                                {if (true) return str.image;}
      break;
    case NOTEQUAL:
      str = jj_consume_token(NOTEQUAL);
                                   {if (true) return str.image;}
      break;
    case GT:
      str = jj_consume_token(GT);
                             {if (true) return str.image;}
      break;
    case LT:
      str = jj_consume_token(LT);
                             {if (true) return str.image;}
      break;
    case GE:
      str = jj_consume_token(GE);
                             {if (true) return str.image;}
      break;
    case LE:
      str = jj_consume_token(LE);
                             {if (true) return str.image;}
      break;
    case LIKE:
      str = jj_consume_token(LIKE);
                               {if (true) return str.image;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String operator() throws ParseException {
        Token str;
        String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
    case NOTEQUAL:
    case GT:
    case LT:
    case GE:
    case LE:
    case LIKE:
      s = queryOperator();
                                      {if (true) return s;}
      break;
    case PLUS:
      str = jj_consume_token(PLUS);
                               {if (true) return str.image;}
      break;
    case MINUS:
      str = jj_consume_token(MINUS);
                                {if (true) return str.image;}
      break;
    case DIV:
      str = jj_consume_token(DIV);
                              {if (true) return str.image;}
      break;
    case MUL:
      str = jj_consume_token(MUL);
                              {if (true) return str.image;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String sqlfloat() throws ParseException {
        String s1;
        String s2;
    s1 = number();

    jj_consume_token(58);
    s2 = number();

                  {if (true) return s1+"."+s2;}
    throw new Error("Missing return statement in function");
  }

  final public String aliasAndColumn() throws ParseException {
        String s1= null;
    s1 = columnName();
                                      {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public String literal() throws ParseException {
Token str;
String s=null;
    if (jj_2_1(2)) {
      s = sqlfloat();
                                              {if (true) return s;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        s = number();
                               {if (true) return s;}
        break;
      default:
        jj_la1[5] = jj_gen;
        if (jj_2_2(2)) {
          s = aliasAndColumn();
                                                    {if (true) return s;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
            s = columnName();
                                   {if (true) return s;}
            break;
          case SINGLE_QUOTED_STRING:
            str = jj_consume_token(SINGLE_QUOTED_STRING);
                                                 {if (true) return str.image;}
            break;
          case IDX_COL_STRING:
            str = jj_consume_token(IDX_COL_STRING);
                                           {if (true) return str.image;}
            break;
          case NULL:
            str = jj_consume_token(NULL);
                                 {if (true) return null;}
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String insertValue() throws ParseException {
Token str;
String s = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case IDX_COL_STRING:
    case SINGLE_QUOTED_STRING:
    case NUMBER:
    case STRING:
      s = literal();
                                {if (true) return s;}
      break;
    case Q:
      jj_consume_token(Q);
                        {if (true) return "?";}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public List<String> literalList() throws ParseException {
        List<String> list = new ArrayList<String>();
        String s;
    s = literal();
                         list.add(s);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      s = literal();
                         list.add(s);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<String> insertList() throws ParseException {
        List<String> list = new ArrayList<String>();
        String s;
    s = insertValue();
                             list.add(s);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      s = insertValue();
                             list.add(s);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void operand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case RPAREN:
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case RPAREN:
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_3(2)) {
          ;
        } else {
          break label_4;
        }
      }
      break;
    default:
      jj_la1[11] = jj_gen;

    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case IDX_COL_STRING:
      case SINGLE_QUOTED_STRING:
      case NUMBER:
      case STRING:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      literal();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case MUL:
        jj_consume_token(MUL);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      literal();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case RPAREN:
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            jj_consume_token(LPAREN);
            break;
          case RPAREN:
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_4(2)) {
            ;
          } else {
            break label_6;
          }
        }
        break;
      default:
        jj_la1[15] = jj_gen;

      }
    }
  }

  final public void groupedOperand() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(LPAREN);
      operand();
      jj_consume_token(RPAREN);
    }
  }

  final public void finalOperand() throws ParseException {
    operand();
  }

  final public void groupedOperandList() throws ParseException {
    operand();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case DIV:
      case MUL:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case MUL:
        jj_consume_token(MUL);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      operand();
    }
  }

  final public Expression expression() throws ParseException {
        String left;
        String op;
        String right;
        boolean likeOp = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case IDX_COL_STRING:
    case SINGLE_QUOTED_STRING:
    case NUMBER:
    case STRING:
      left = literal();

      break;
    case Q:
      jj_consume_token(Q);
                                             left = "?";
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    op = queryOperator();

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case IDX_COL_STRING:
    case SINGLE_QUOTED_STRING:
    case NUMBER:
    case STRING:
      right = literal();

      break;
    case Q:
      jj_consume_token(Q);
                                     right = "?";
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          Expression ex = new Expression(); ex.likeOp = likeOp; ex.leftOp = left; ex.op=op; ex.rightOp=right; {if (true) return ex;}
    throw new Error("Missing return statement in function");
  }

  final public List<Expression> andExpression() throws ParseException {
        List<Expression> list = new ArrayList<Expression>();
        Expression ex;
    ex = expression();
                            list.add(ex);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
      ex = expression();
                                    list.add(ex);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void groupedExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
    case Q:
    case NULL:
    case IDX_COL_STRING:
    case SINGLE_QUOTED_STRING:
    case NUMBER:
    case STRING:
      expression();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public List<String> columnNameList() throws ParseException {
        List<String> list = new ArrayList<String>();
        String s;
    s = columnName();
                           list.add(s);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      s = columnName();
                                                                         list.add(s);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public InsertStmt insertStmt() throws ParseException {
        Token str;
        String table;
        List<String> columns;
        InsertColumns values;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    str = jj_consume_token(STRING);
                        table = str.image;
    jj_consume_token(LPAREN);
    columns = columnNameList();

    jj_consume_token(RPAREN);
    values = insertValues();

           InsertStmt is = new InsertStmt(); is.table = table; is.columns = columns; is.values = values; {if (true) return is;}
    throw new Error("Missing return statement in function");
  }

  final public InsertColumns insertValues() throws ParseException {
        List<String> values = null;
        SelectStmt stmt;
        InsertColumns ic = null;
    jj_consume_token(VALUES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      values = insertList();
                                             ic = new InsertColumns(); ic.list=values;
      jj_consume_token(RPAREN);
      break;
    case SELECT:
      stmt = selectStmt();
                                ic = new InsertColumns(); ic.stmt = stmt;
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ic;}
    throw new Error("Missing return statement in function");
  }

  final public SelectStmt selectStmt() throws ParseException {
        SelectStmt stmt = new SelectStmt();
        Token t;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MUL:
      t = jj_consume_token(MUL);
                                    stmt.selectColList = new ArrayList<String>(); stmt.selectColList.add(t.image);
      break;
    case NULL:
    case IDX_COL_STRING:
    case SINGLE_QUOTED_STRING:
    case NUMBER:
    case STRING:
      stmt.selectColList = literalList();

      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FROM);
    stmt.tableDefList = tabledefList();

    stmt.filter = filter();

          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public DeleteStmt deleteStmt() throws ParseException {
        DeleteStmt stmt = new DeleteStmt();
    if (jj_2_5(2)) {
      jj_consume_token(DELETE);
      jj_consume_token(FROM);
      stmt.table = tableName();

      stmt.filter = filter();
                                 {if (true) return stmt;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
        jj_consume_token(DELETE);
        stmt.table = tableName();

        stmt.filter = filter();
                                 {if (true) return stmt;}
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public UpdateStmt updateStmt() throws ParseException {
        UpdateStmt op = new UpdateStmt();
    jj_consume_token(UPDATE);
    op.table = tableName();

    jj_consume_token(SET);
    op.updateSetExpList = updateSetExpressionList();

    op.filter = filter();
          {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public boolean unique() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIQUE:
      t = jj_consume_token(UNIQUE);
                       {if (true) return true;}
      break;
    default:
      jj_la1[27] = jj_gen;
          {if (true) return false;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String dataType() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
                    {if (true) return "int";}
      break;
    case LONG:
      t = jj_consume_token(LONG);
                     {if (true) return "long";}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
                      {if (true) return "float";}
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
                       {if (true) return "double";}
      break;
    case STR:
      t = jj_consume_token(STR);
                    {if (true) return "string";}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String indexCol() throws ParseException {
        String s;
        Token str;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      s = columnName();
                           {if (true) return s;}
      break;
    case IDX_COL_STRING:
      str = jj_consume_token(IDX_COL_STRING);
                                 {if (true) return str.image;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<IndexCol> indexColList() throws ParseException {
        List<IndexCol> list = new ArrayList<IndexCol>();
        String indexCol;
        String type;
        IndexCol c = null;
    indexCol = indexCol();

    type = dataType();
                            c = new IndexCol(); c.col = indexCol; c.type=type; list.add(c);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      indexCol = indexCol();

      type = dataType();
                            c = new IndexCol(); c.col = indexCol; c.type=type; list.add(c);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<IndexCol> tableColList() throws ParseException {
        List<IndexCol> list = new ArrayList<IndexCol>();
        String indexCol;
        String type;
        IndexCol c = null;
    indexCol = columnName();

    type = dataType();
                            c = new IndexCol(); c.col = indexCol; c.type=type; list.add(c);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      indexCol = columnName();

      type = dataType();
                            c = new IndexCol(); c.col = indexCol; c.type=type; list.add(c);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public CreateIndexStmt createIndexStmt() throws ParseException {
        CreateIndexStmt stmt = new CreateIndexStmt();
        Token t;
    stmt.unique = unique();

    jj_consume_token(INDEX);
    t = jj_consume_token(STRING);
                       stmt.idxName = t.image;
    jj_consume_token(ON);
    t = jj_consume_token(STRING);
                       stmt.table = t.image;
    jj_consume_token(LPAREN);
    stmt.colList = indexColList();

    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STORAGE:
      jj_consume_token(STORAGE);
      stmt.storage = fileName();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTableStmt createTableStmt() throws ParseException {
        CreateTableStmt stmt = new CreateTableStmt();
        Token t;
    jj_consume_token(TABLE);
    t = jj_consume_token(STRING);
                       stmt.tableName = t.image;
    jj_consume_token(LPAREN);
    stmt.colList = tableColList();

    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STORAGE:
      jj_consume_token(STORAGE);
      stmt.storage = fileName();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateShardStmt createShardStmt() throws ParseException {
        CreateShardStmt stmt = new CreateShardStmt();
        Token t = null;
    jj_consume_token(SHARD);
    t = jj_consume_token(STRING);
                       stmt.collectionName = t.image;
    t = jj_consume_token(STRING);
                       stmt.replicaSetName = t.image;
    t = jj_consume_token(STRING);
                       stmt.indexName = t.image;
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateReplicaSetStmt createReplicaSetStmt() throws ParseException {
        CreateReplicaSetStmt stmt = new CreateReplicaSetStmt();
        Token t = null;
    jj_consume_token(REPLICASET);
    t = jj_consume_token(STRING);
                       stmt.replicaSetName = t.image;
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AddToReplicaSetStmt addToReplicaSetStmt() throws ParseException {
        AddToReplicaSetStmt stmt = new AddToReplicaSetStmt();
        Token t = null;
    jj_consume_token(ADD);
    jj_consume_token(TO);
    jj_consume_token(REPLICASET);
    t = jj_consume_token(STRING);
                       stmt.replicaSetName = t.image;
    t = jj_consume_token(SINGLE_QUOTED_STRING);
                                     stmt.nodeId = t.image;
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTableStmt alterTableStmt() throws ParseException {
        CreateTableStmt stmt = new CreateTableStmt();
        Token t;
    jj_consume_token(ALTER);
    jj_consume_token(TABLE);
    t = jj_consume_token(STRING);
                       stmt.tableName = t.image;
    jj_consume_token(ADD);
    jj_consume_token(LPAREN);
    stmt.colList = indexColList();

    jj_consume_token(RPAREN);
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public Object create() throws ParseException {
        Object o;
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE:
      o = createTableStmt();
      break;
    case INDEX:
    case UNIQUE:
      o = createIndexStmt();
      break;
    case STORAGE:
      o = createStorageStmt();
      break;
    case SHARD:
      o = createShardStmt();
      break;
    case REPLICASET:
      o = createReplicaSetStmt();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object show() throws ParseException {
        Object o;
    jj_consume_token(SHOW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCHEMA:
      o = showSchema();
      break;
    case TABLE:
      o = showTable();
      break;
    case INDEX:
      o = showIndex();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public ShowTableStmt showTable() throws ParseException {
        ShowTableStmt stmt = new ShowTableStmt();
        Token t;
    jj_consume_token(TABLE);
    t = jj_consume_token(STRING);
                       stmt.tableName = t.image;
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public ShowIndexStmt showIndex() throws ParseException {
        ShowIndexStmt stmt = new ShowIndexStmt();
        Token t;
    jj_consume_token(INDEX);
    t = jj_consume_token(STRING);
                       stmt.indexName = t.image;
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public ShowSchemaStmt showSchema() throws ParseException {
        ShowSchemaStmt stmt = new ShowSchemaStmt();
    jj_consume_token(SCHEMA);
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public String tableName() throws ParseException {
        Token t;
    t = jj_consume_token(STRING);
                       {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public UpdateSetExpression updateSetExpression() throws ParseException {
        UpdateSetExpression exp = new UpdateSetExpression();
    exp.column = leftUpdateSetOperand();

    jj_consume_token(EQUALS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case IDX_COL_STRING:
    case SINGLE_QUOTED_STRING:
    case NUMBER:
    case STRING:
      exp.value = literal();
      break;
    case Q:
      jj_consume_token(Q);
                                      exp.value = "?";
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public List<UpdateSetExpression> updateSetExpressionList() throws ParseException {
        List<UpdateSetExpression> list = new ArrayList<UpdateSetExpression>();
        UpdateSetExpression exp;
    exp = updateSetExpression();
                                      list.add(exp);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      exp = updateSetExpression();
                                                      list.add(exp);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public String leftUpdateSetOperand() throws ParseException {
        String str;
    str = columnName();
                             {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final public Filter filter() throws ParseException {
        List<Expression> list = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      list = andExpression();
                                                      Filter f = new Filter(); f.andList=list; {if (true) return f;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return null;}
      break;
    default:
      jj_la1[38] = jj_gen;
          {if (true) throw new RuntimeException ("Invalid filter");}
    }
    throw new Error("Missing return statement in function");
  }

  final public void selectColumns() throws ParseException {
    jj_consume_token(LPAREN);
    columnNameList();
    jj_consume_token(RPAREN);
  }

  final public TableDef tabledef() throws ParseException {
        String table;
        String alias;
        Token t;
    if (jj_2_6(2)) {
      t = jj_consume_token(STRING);
                               table=t.image;
      t = jj_consume_token(STRING);
                               alias=t.image; TableDef d = new TableDef(); d.table = table; d.alias=alias; {if (true) return d;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                               table=t.image; TableDef d = new TableDef(); d.table = table; {if (true) return d;}
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<TableDef> tabledefList() throws ParseException {
        List<TableDef> list = new ArrayList<TableDef>();
        TableDef d = null;
    d = tabledef();
                         list.add(d);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      d = tabledef();
                                 list.add(d);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public CreateStorageStmt createStorageStmt() throws ParseException {
        CreateStorageStmt stmt = new CreateStorageStmt();
        Token t;
    jj_consume_token(STORAGE);
    stmt.fileName = fileName();
                                                   stmt.blockSize = number();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS_DEFAULT:
      jj_consume_token(IS_DEFAULT);
      jj_consume_token(EQUALS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case YES:
        jj_consume_token(YES);
                                                 stmt.isDefault = true;
        break;
      case NO:
        jj_consume_token(NO);
                                                                                  stmt.isDefault = false;
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

/** Root production. */
  final public Object parse() throws ParseException {
        Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      o = selectStmt();
      break;
    case INSERT:
      o = insertStmt();
      break;
    case UPDATE:
      o = updateStmt();
      break;
    case DELETE:
      o = deleteStmt();
      break;
    case CREATE:
      o = create();
      break;
    case ALTER:
      o = alterTableStmt();
      break;
    case SHOW:
      o = show();
      break;
    case ADD:
      o = addToReplicaSetStmt();
      break;
    case STRING:
      o = columnName();
      jj_consume_token(0);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public UQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x8000000,0x0,0xfc0000,0xffc0000,0x0,0x0,0x0,0x8000,0x8000,0x30000,0x30000,0x0,0xf000000,0x30000,0x30000,0x10000,0xf000000,0xf000000,0x0,0x0,0x2000,0x10000,0x8000,0x10040,0x8000000,0x80,0x0,0xf0000000,0x0,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x8000,0x201,0x0,0x8000,0x0,0x0,0x1e0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000000,0x1000000,0x4000000,0x200,0x200,0x800000,0x1510000,0x1d10100,0x0,0x0,0x0,0x0,0x1d10000,0x0,0x0,0x0,0x0,0x0,0x0,0x1d10100,0x1d10100,0x0,0x1d10100,0x0,0x0,0x1d10000,0x0,0x8,0x1,0x1100000,0x0,0x0,0x400,0x400,0x6042c,0xa4,0x1d10100,0x0,0x0,0x1000000,0x0,0x3000,0x800,0x100c042,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public UQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public UQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public UQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new UQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public UQLParser(UQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(UQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
